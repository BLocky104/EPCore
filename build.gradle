/**
 * It is advised that you do not edit anything in the build.gradle; unless you are sure of what you are doing
 */

import com.gtnewhorizons.retrofuturagradle.mcp.InjectTagsTask
import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.19'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.+'
}

// Early Assertions
assertProperty 'mod_version'
assertProperty 'root_package'
assertProperty 'mod_id'
assertProperty 'mod_name'

assertSubProperties 'use_tags', 'tag_class_name'
assertSubProperties 'use_access_transformer', 'access_transformer_locations'
assertSubProperties 'use_mixins', 'mixin_booter_version', 'mixin_refmap'
assertSubProperties 'is_coremod', 'coremod_includes_mod', 'coremod_plugin_class_name'
assertSubProperties 'use_asset_mover', 'asset_mover_version'

warnAndSetDefaultProperty 'generate_sources_jar', false
warnAndSetDefaultProperty 'generate_javadocs_jar', false
warnAndSetDefaultProperty 'mapping_channel', 'stable'
warnAndSetDefaultProperty 'mapping_version', '39'
warnAndSetDefaultProperty 'minecraft_username', 'Developer'

version = project.mod_version
group = project.root_package
archivesBaseName = project.mod_id

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    if (project.generate_sources_jar.toBoolean()) {
        withSourcesJar()
    }
    if (project.generate_javadocs_jar.toBoolean()) {
        withJavadocJar()
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = project.mapping_channel
    mcpMappingVersion = project.mapping_version
    
    // Set username here, the UUID will be looked up automatically
    username = project.minecraft_username
    
    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')
    
    // Add various JVM arguments here for runtime
    def args = ['-ea:' + project.group]
    if (project.is_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + project.coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }

    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    if (file('tags.properties').exists()) {
        def props = new Properties()
        file('tags.properties').withInputStream {
            props.load(it)
        }
        injectedTags.putAll(props)
    }
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
}

dependencies {
    if (project.use_asset_mover.toBoolean()) {
        implementation "com.cleanroommc:assetmover:${project.asset_mover_version}"
    }

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins("zone.rong:mixinbooter:${project.mixin_booter_version}", "" + project.mixin_refmap)
        api (mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor (mixin) {
            transitive = false
        }
    }

}

apply from: 'dependencies.gradle'

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (def location : project.access_transformer_locations.split(' ')) {
        def fileLocation = file("${project.projectDir}/src/main/resources/${location}")
        if (fileLocation.exists()) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        } else {
            throw new GradleException("Access Transformer file [${fileLocation}] does not exist!")
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    if (project.use_mixins.toBoolean()) {
        inputs.property 'refmap', project.mixin_refmap
    }

    if (project.use_mixins.toBoolean()) {
        include('mixins.*.json').exclude(project.mixin_refmap).expand('refmap': project.mixin_refmap)
    }
    
    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
    
    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.is_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                def currentTasks = project.gradle.startParameter.taskNames
                if (currentTasks[0] == 'build' || currentTasks[0] == 'prepareObfModsFolder' || currentTasks[0] == 'runObfClient') {
                    attribute_map['ForceLoadAsMod'] = true
                }
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.access_transformer_locations
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs
                                    .collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named('injectTags', InjectTagsTask).configure {
    it.outputClassName.set(provider {
        return it.getTags().get().isEmpty() ? null : "${project.tag_class_name}"
    })
}

tasks.named('processIdeaSettings').configure {
    it.dependsOn 'injectTags'
}

apply from: 'publishing.gradle'
apply from: 'extra.gradle'

void assertProperty(String propertyName) {
    def property = project.findProperty propertyName
    if (property == null) {
        throw new GradleException("Property ${propertyName} is not defined!")
    }
    if (property.isEmpty()) {
        throw new GradleException("Property ${propertyName} is empty!")
    }
}

void assertSubProperties(String propertyName, String... subPropertyNames) {
    assertProperty propertyName
    if (project.findProperty(propertyName).toBoolean()) {
        for (String subPropertyName : subPropertyNames) {
            assertProperty subPropertyName
        }
    }
}

void warnAndSetDefaultProperty(String propertyName, defaultValue) {
    def property = project.findProperty propertyName
    def exists = true
    if (property == null) {
        exists = false
        project.logger.log LogLevel.WARN, "Property ${propertyName} is not defined!"
    } else if (property.isEmpty()) {
        exists = false
        project.logger.log LogLevel.WARN, "Property ${propertyName} is empty!"
    }
    if (!exists) {
        project.setProperty propertyName, defaultValue.toString()
    }
}

void assertEnvironmentVariable(String propertyName) {
    def property = System.getenv propertyName
    if (property == null) {
        throw new GradleException("System Environment Variable ${propertyName} is not defined!")
    }
    if (property.isEmpty()) {
        throw new GradleException("Property ${propertyName} is empty!")
    }
}